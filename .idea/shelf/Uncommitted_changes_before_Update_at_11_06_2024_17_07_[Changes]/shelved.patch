Index: front/src/index.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>IronInsight</title>\n  <base href=\"/\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body>\n  <app-root></app-root>\n</body>\n</html>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/front/src/index.html b/front/src/index.html
--- a/front/src/index.html	(revision 8ca8b2131d04b55f8c26184a4d2699cd8597e1ea)
+++ b/front/src/index.html	(date 1718109819224)
@@ -6,6 +6,10 @@
   <base href="/">
   <meta name="viewport" content="width=device-width, initial-scale=1">
   <link rel="icon" type="image/x-icon" href="favicon.ico">
+
+  <link rel="preconnect" href="https://fonts.googleapis.com">
+  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
+  <link href="https://fonts.googleapis.com/css2?family=Archivo+Black&family=Inter:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
 </head>
 <body>
   <app-root></app-root>
Index: back/src/router.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Express } from \"express\";\nimport { dbService } from \"../services/db-service\";\nimport { userService } from \"../services/UserService\";\nimport { exerciseService } from \"../services/ExerciseService\";\nimport { programService } from \"../services/ProgramService\";\n\nexport default class Router\n{\n    private app: Express;\n\n    constructor(app: Express) {\n        this.app = app;\n        this.bindRoutes();\n    }\n\n    private bindRoutes() {\n        this.app.get('/test', (req, res) => {\n            userService.getUserById(2).then((user) => {\n                res.send(user)\n            })\n        });\n\n        this.app.post('/register', (req, res) => {\n            console.log(req);\n            //userService.userExists(req)\n        })\n\n        this.app.get('/exercises', (req, res) => {\n            exerciseService.getAllExercises().then((exercises) => {\n                res.send(exercises)\n            })\n        });\n\n        this.app.get('/programs', (req, res) => {\n            programService.getAllPrograms().then((programs) => {\n                res.send(programs)\n            })\n        });\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/back/src/router.ts b/back/src/router.ts
--- a/back/src/router.ts	(revision 8ca8b2131d04b55f8c26184a4d2699cd8597e1ea)
+++ b/back/src/router.ts	(date 1718116755987)
@@ -4,37 +4,40 @@
 import { exerciseService } from "../services/ExerciseService";
 import { programService } from "../services/ProgramService";
 
-export default class Router
+class Router
 {
     private app: Express;
 
-    constructor(app: Express) {
+    constructor() {}
+
+    public init(app: Express): void
+    {
         this.app = app;
-        this.bindRoutes();
     }
 
-    private bindRoutes() {
-        this.app.get('/test', (req, res) => {
-            userService.getUserById(2).then((user) => {
-                res.send(user)
-            })
-        });
+    /**
+     * Get request
+     * @param url
+     * @param callback
+     */
+    public get(url: string, callback: Function)
+    {
+        this.app.get(url, (req, res) => {
+            callback(req, res);
+        })
+    }
 
-        this.app.post('/register', (req, res) => {
-            console.log(req);
-            //userService.userExists(req)
+    /**
+     * Post request
+     * @param url
+     * @param callback
+     */
+    public post(url: string, callback: Function)
+    {
+        this.app.post(url, (req, res) => {
+            callback(req, res);
         })
+    }
+}
 
-        this.app.get('/exercises', (req, res) => {
-            exerciseService.getAllExercises().then((exercises) => {
-                res.send(exercises)
-            })
-        });
-
-        this.app.get('/programs', (req, res) => {
-            programService.getAllPrograms().then((programs) => {
-                res.send(programs)
-            })
-        });
-    }
-}
\ No newline at end of file
+export const router = new Router();
\ No newline at end of file
Index: front/angular.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n  \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n  \"version\": 1,\n  \"newProjectRoot\": \"projects\",\n  \"projects\": {\n    \"IronInsight\": {\n      \"projectType\": \"application\",\n      \"schematics\": {\n        \"@schematics/angular:component\": {\n          \"style\": \"scss\"\n        }\n      },\n      \"root\": \"\",\n      \"sourceRoot\": \"src\",\n      \"prefix\": \"app\",\n      \"architect\": {\n        \"build\": {\n          \"builder\": \"@angular-devkit/build-angular:application\",\n          \"options\": {\n            \"outputPath\": \"dist/iron-insight\",\n            \"index\": \"src/index.html\",\n            \"browser\": \"src/main.ts\",\n            \"polyfills\": [\n              \"zone.js\"\n            ],\n            \"tsConfig\": \"tsconfig.app.json\",\n            \"inlineStyleLanguage\": \"scss\",\n            \"assets\": [\n              {\n                \"glob\": \"**/*\",\n                \"input\": \"public\"\n              }\n            ],\n            \"styles\": [\n              \"src/styles.scss\"\n            ],\n            \"scripts\": []\n          },\n          \"configurations\": {\n            \"production\": {\n              \"budgets\": [\n                {\n                  \"type\": \"initial\",\n                  \"maximumWarning\": \"500kB\",\n                  \"maximumError\": \"1MB\"\n                },\n                {\n                  \"type\": \"anyComponentStyle\",\n                  \"maximumWarning\": \"2kB\",\n                  \"maximumError\": \"4kB\"\n                }\n              ],\n              \"outputHashing\": \"all\"\n            },\n            \"development\": {\n              \"optimization\": false,\n              \"extractLicenses\": false,\n              \"sourceMap\": true\n            }\n          },\n          \"defaultConfiguration\": \"production\"\n        },\n        \"serve\": {\n          \"builder\": \"@angular-devkit/build-angular:dev-server\",\n          \"configurations\": {\n            \"production\": {\n              \"buildTarget\": \"IronInsight:build:production\"\n            },\n            \"development\": {\n              \"buildTarget\": \"IronInsight:build:development\"\n            }\n          },\n          \"defaultConfiguration\": \"development\"\n        },\n        \"extract-i18n\": {\n          \"builder\": \"@angular-devkit/build-angular:extract-i18n\"\n        },\n        \"test\": {\n          \"builder\": \"@angular-devkit/build-angular:karma\",\n          \"options\": {\n            \"polyfills\": [\n              \"zone.js\",\n              \"zone.js/testing\"\n            ],\n            \"tsConfig\": \"tsconfig.spec.json\",\n            \"inlineStyleLanguage\": \"scss\",\n            \"assets\": [\n              {\n                \"glob\": \"**/*\",\n                \"input\": \"public\"\n              }\n            ],\n            \"styles\": [\n              \"src/styles.scss\"\n            ],\n            \"scripts\": []\n          }\n        }\n      }\n    }\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/front/angular.json b/front/angular.json
--- a/front/angular.json	(revision 8ca8b2131d04b55f8c26184a4d2699cd8597e1ea)
+++ b/front/angular.json	(date 1718108173767)
@@ -98,5 +98,8 @@
         }
       }
     }
+  },
+  "cli": {
+    "analytics": false
   }
 }
Index: back/controllers/programsController.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/back/controllers/programsController.ts b/back/controllers/programsController.ts
new file mode 100644
--- /dev/null	(date 1718116749754)
+++ b/back/controllers/programsController.ts	(date 1718116749754)
@@ -0,0 +1,20 @@
+import {router} from "../src/router";
+import {programService} from "../services/ProgramService";
+
+class ProgramsController {
+    constructor() {}
+
+    public init()
+    {
+        router.get("/programs", this.handleAllPrograms)
+    }
+
+    private handleAllPrograms(req, res)
+    {
+        programService.getAllPrograms().then((programs) => {
+            res.send(programs)
+        })
+    }
+}
+
+export const programsController = new ProgramsController();
\ No newline at end of file
Index: front/src/app/app.component.scss
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/front/src/app/app.component.scss b/front/src/app/app.component.scss
--- a/front/src/app/app.component.scss	(revision 8ca8b2131d04b55f8c26184a4d2699cd8597e1ea)
+++ b/front/src/app/app.component.scss	(date 1718109875703)
@@ -1,0 +1,16 @@
+.archivo {
+  font-family: "Archivo Black", sans-serif;
+  font-weight: 400;
+  font-style: normal;
+}
+
+.inter {
+  font-family: "Inter", sans-serif;
+  font-optical-sizing: auto;
+  font-weight: 400;
+  font-style: normal;
+}
+
+* {
+  font-family: "Inter", serif;
+}
Index: back/src/app.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import express, { Express } from \"express\";\nimport { createServer, Server } from \"http\";\nimport cors from \"cors\";\nimport helmet from \"helmet\";\nimport { dbService } from \"../services/db-service\";\nimport Router from \"./router\";\n\nexport class App {\n\n    private app: Express;\n    private router: Router\n\n    constructor() {\n        dbService.connect()\n            .then(() => {\n                this.init();\n                //routes binder\n                this.router = new Router(this.app);\n                this.start();\n            })\n            .catch(err => {\n                console.error('Erreur lors de la mise en route du service: ', err);\n            });\n    }\n\n    private init() {\n        this.app = express();\n        //cors\n        this.app.use(cors());\n        //for images\n        this.app.use(helmet({\n            crossOriginResourcePolicy: false,\n        }));\n        //public path\n        this.app.use('/public', express.static('public'));\n    }\n\n    private start() {\n        //creating server\n        const server: Server = createServer(this.app);\n        //listening server\n        server.listen(3333, () => {\n            console.log('Serveur démarré sur le port 3333');\n        });\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/back/src/app.ts b/back/src/app.ts
--- a/back/src/app.ts	(revision 8ca8b2131d04b55f8c26184a4d2699cd8597e1ea)
+++ b/back/src/app.ts	(date 1718116841559)
@@ -3,19 +3,22 @@
 import cors from "cors";
 import helmet from "helmet";
 import { dbService } from "../services/db-service";
-import Router from "./router";
+import {router} from "./router";
+import {userController} from "../controllers/userController";
+import {exerciseController} from "../controllers/exerciseController";
+import {programsController} from "../controllers/programsController";
 
 export class App {
 
     private app: Express;
-    private router: Router
 
     constructor() {
         dbService.connect()
             .then(() => {
                 this.init();
-                //routes binder
-                this.router = new Router(this.app);
+                //routes init
+                router.init(this.app);
+                this.initControllers();
                 this.start();
             })
             .catch(err => {
@@ -31,10 +34,22 @@
         this.app.use(helmet({
             crossOriginResourcePolicy: false,
         }));
+        this.app.use(express.json());
         //public path
         this.app.use('/public', express.static('public'));
     }
 
+    /**
+     * Init controllers
+     * @private
+     */
+    private initControllers()
+    {
+        userController.init()
+        exerciseController.init()
+        programsController.init()
+    }
+
     private start() {
         //creating server
         const server: Server = createServer(this.app);
Index: front/src/app/app.config.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';\nimport { provideRouter } from '@angular/router';\n\nimport { routes } from './app.routes';\n\nexport const appConfig: ApplicationConfig = {\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes)]\n};\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/front/src/app/app.config.ts b/front/src/app/app.config.ts
--- a/front/src/app/app.config.ts	(revision 8ca8b2131d04b55f8c26184a4d2699cd8597e1ea)
+++ b/front/src/app/app.config.ts	(date 1718114746439)
@@ -2,7 +2,12 @@
 import { provideRouter } from '@angular/router';
 
 import { routes } from './app.routes';
+import {provideHttpClient} from "@angular/common/http";
 
 export const appConfig: ApplicationConfig = {
-  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes)]
+  providers: [
+    provideZoneChangeDetection({ eventCoalescing: true }),
+    provideRouter(routes),
+    provideHttpClient()
+  ]
 };
Index: back/controllers/userController.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/back/controllers/userController.ts b/back/controllers/userController.ts
new file mode 100644
--- /dev/null	(date 1718118371726)
+++ b/back/controllers/userController.ts	(date 1718118371726)
@@ -0,0 +1,27 @@
+import {router} from "../src/router";
+import {userService} from "../services/UserService";
+
+class UserController {
+    constructor() {}
+
+    public init(): void
+    {
+        router.post('/register', this.handlerRegister)
+    }
+
+    public handlerRegister(req: any, res: any): void
+    {
+        const data = req.body;
+        /*
+        userService.userExists(req.body).then((exists) => {
+        }).catch(() => {
+            res.send({
+                status: false,
+            })
+        })
+
+         */
+    }
+}
+
+export const userController = new UserController()
\ No newline at end of file
Index: back/controllers/exerciseController.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/back/controllers/exerciseController.ts b/back/controllers/exerciseController.ts
new file mode 100644
--- /dev/null	(date 1718116635476)
+++ b/back/controllers/exerciseController.ts	(date 1718116635476)
@@ -0,0 +1,19 @@
+import {router} from "../src/router";
+import {exerciseService} from "../services/ExerciseService";
+
+class ExerciseController {
+    constructor() {}
+
+    public init()
+    {
+        router.get('/exercises', this.handleAllExercises)
+    }
+
+    private handleAllExercises(req, res) {
+        exerciseService.getAllExercises().then((exercises) => {
+            res.send(exercises)
+        })
+    }
+}
+
+export const exerciseController = new ExerciseController();
\ No newline at end of file
Index: front/src/app/app.routes.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Routes } from '@angular/router';\n\nexport const routes: Routes = [];\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/front/src/app/app.routes.ts b/front/src/app/app.routes.ts
--- a/front/src/app/app.routes.ts	(revision 8ca8b2131d04b55f8c26184a4d2699cd8597e1ea)
+++ b/front/src/app/app.routes.ts	(date 1718109280879)
@@ -1,3 +1,9 @@
 import { Routes } from '@angular/router';
 
-export const routes: Routes = [];
+import { HomeComponent } from './home/home.component';
+import {RegisterComponent} from "./register/register.component";
+
+export const routes: Routes = [
+  {path: "register", component: RegisterComponent},
+  {path: "", component: HomeComponent},
+];
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(date 1718116881594)
+++ b/.gitignore	(date 1718116881594)
@@ -0,0 +1,2 @@
+.http
+node_modules
\ No newline at end of file
Index: back/services/UserService.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { dbService } from \"./db-service\";\nimport User from \"../models/User\";\n\nclass UserService\n{\n\n    constructor()\n    {\n\n    }\n\n    public async getUserById(id: number): Promise<User> {\n        const r = await dbService.query(\"SELECT * FROM users WHERE id_user = ?\", [id]);\n        return r as User;\n    }\n\n    public async registerUser(user: User): Promise<boolean>\n    {\n        \n    }\n\n    public async userExists(user: User): Promise<boolean>\n    {\n        return await dbService.query(\"SELECT * FROM users WHERE username = ?\", [user.username]);\n    }\n}\n\nexport const userService = new UserService();
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/back/services/UserService.ts b/back/services/UserService.ts
--- a/back/services/UserService.ts	(revision 8ca8b2131d04b55f8c26184a4d2699cd8597e1ea)
+++ b/back/services/UserService.ts	(date 1718113553823)
@@ -14,11 +14,14 @@
         return r as User;
     }
 
+    /*
     public async registerUser(user: User): Promise<boolean>
     {
-        
+
     }
 
+     */
+
     public async userExists(user: User): Promise<boolean>
     {
         return await dbService.query("SELECT * FROM users WHERE username = ?", [user.username]);
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"de7ca3ed-f100-490d-a07e-8e730243af48\" name=\"Changes\" comment=\"\">\n      <change afterPath=\"$PROJECT_DIR$/.idea/vcs.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/back/services/UserService.ts\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/back/services/UserService.ts\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"ComposerSettings\">\n    <execution />\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"GitHubPullRequestSearchHistory\"><![CDATA[{\n  \"lastFilter\": {\n    \"state\": \"OPEN\",\n    \"assignee\": \"ViartFelix\"\n  }\n}]]></component>\n  <component name=\"GithubPullRequestsUISettings\"><![CDATA[{\n  \"selectedUrlAndAccountId\": {\n    \"url\": \"https://github.com/ViartFelix/IronInsight.git\",\n    \"accountId\": \"cfac2eb9-ac42-4671-a546-97743bc9009f\"\n  }\n}]]></component>\n  <component name=\"PhpWorkspaceProjectConfiguration\" interpreter_name=\"/bin/php\" />\n  <component name=\"ProjectColorInfo\"><![CDATA[{\n  \"associatedIndex\": 7\n}]]></component>\n  <component name=\"ProjectId\" id=\"2hjVRl0gdGTKixkdjTUla2BwVrA\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"ASKED_SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\n    \"git-widget-placeholder\": \"master\",\n    \"node.js.detected.package.eslint\": \"true\",\n    \"node.js.detected.package.tslint\": \"true\",\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\n    \"nodejs_package_manager_path\": \"npm\",\n    \"ts.external.directory.path\": \"/snap/phpstorm/400/plugins/javascript-plugin/jsLanguageServicesImpl/external\",\n    \"vue.rearranger.settings.migration\": \"true\"\n  }\n}]]></component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-js-predefined-1d06a55b98c1-0b3e54e931b4-JavaScript-PS-241.17890.8\" />\n        <option value=\"bundled-php-predefined-ba97393d7c68-48a1a656d44e-com.jetbrains.php.sharedIndexes-PS-241.17890.8\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"de7ca3ed-f100-490d-a07e-8e730243af48\" name=\"Changes\" comment=\"\" />\n      <created>1718107471509</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1718107471509</updated>\n      <workItem from=\"1718107477115\" duration=\"383000\" />\n    </task>\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 8ca8b2131d04b55f8c26184a4d2699cd8597e1ea)
+++ b/.idea/workspace.xml	(date 1718118374314)
@@ -4,9 +4,27 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="de7ca3ed-f100-490d-a07e-8e730243af48" name="Changes" comment="">
-      <change afterPath="$PROJECT_DIR$/.idea/vcs.xml" afterDir="false" />
+    <list default="true" id="de7ca3ed-f100-490d-a07e-8e730243af48" name="Changes" comment="(+) revert back">
+      <change afterPath="$PROJECT_DIR$/.gitignore" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/back/controllers/exerciseController.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/back/controllers/programsController.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/back/controllers/userController.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/front/src/interfaces/user.interface.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/front/src/services/user.service.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/back/services/UserService.ts" beforeDir="false" afterPath="$PROJECT_DIR$/back/services/UserService.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/back/services/db-service.ts" beforeDir="false" afterPath="$PROJECT_DIR$/back/services/db-service.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/back/src/app.ts" beforeDir="false" afterPath="$PROJECT_DIR$/back/src/app.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/back/src/router.ts" beforeDir="false" afterPath="$PROJECT_DIR$/back/src/router.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/front/angular.json" beforeDir="false" afterPath="$PROJECT_DIR$/front/angular.json" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/front/src/app/app.component.html" beforeDir="false" afterPath="$PROJECT_DIR$/front/src/app/app.component.html" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/front/src/app/app.component.scss" beforeDir="false" afterPath="$PROJECT_DIR$/front/src/app/app.component.scss" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/front/src/app/app.component.ts" beforeDir="false" afterPath="$PROJECT_DIR$/front/src/app/app.component.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/front/src/app/app.config.ts" beforeDir="false" afterPath="$PROJECT_DIR$/front/src/app/app.config.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/front/src/app/app.routes.ts" beforeDir="false" afterPath="$PROJECT_DIR$/front/src/app/app.routes.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/front/src/app/register/register.component.html" beforeDir="false" afterPath="$PROJECT_DIR$/front/src/app/register/register.component.html" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/front/src/app/register/register.component.ts" beforeDir="false" afterPath="$PROJECT_DIR$/front/src/app/register/register.component.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/front/src/index.html" beforeDir="false" afterPath="$PROJECT_DIR$/front/src/index.html" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -15,47 +33,76 @@
   </component>
   <component name="ComposerSettings">
     <execution />
+  </component>
+  <component name="FileTemplateManagerImpl">
+    <option name="RECENT_TEMPLATES">
+      <list>
+        <option value="HTTP Request" />
+        <option value="TypeScript File" />
+      </list>
+    </option>
   </component>
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
-  <component name="GitHubPullRequestSearchHistory"><![CDATA[{
-  "lastFilter": {
-    "state": "OPEN",
-    "assignee": "ViartFelix"
+  <component name="GitHubPullRequestSearchHistory">{
+  &quot;lastFilter&quot;: {
+    &quot;state&quot;: &quot;OPEN&quot;,
+    &quot;assignee&quot;: &quot;ViartFelix&quot;
   }
-}]]></component>
-  <component name="GithubPullRequestsUISettings"><![CDATA[{
-  "selectedUrlAndAccountId": {
-    "url": "https://github.com/ViartFelix/IronInsight.git",
-    "accountId": "cfac2eb9-ac42-4671-a546-97743bc9009f"
+}</component>
+  <component name="GithubPullRequestsUISettings">{
+  &quot;selectedUrlAndAccountId&quot;: {
+    &quot;url&quot;: &quot;https://github.com/ViartFelix/IronInsight.git&quot;,
+    &quot;accountId&quot;: &quot;cfac2eb9-ac42-4671-a546-97743bc9009f&quot;
   }
-}]]></component>
+}</component>
   <component name="PhpWorkspaceProjectConfiguration" interpreter_name="/bin/php" />
-  <component name="ProjectColorInfo"><![CDATA[{
-  "associatedIndex": 7
-}]]></component>
+  <component name="ProjectColorInfo">{
+  &quot;associatedIndex&quot;: 7
+}</component>
   <component name="ProjectId" id="2hjVRl0gdGTKixkdjTUla2BwVrA" />
   <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
   <component name="ProjectViewState">
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "ASKED_SHARE_PROJECT_CONFIGURATION_FILES": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
-    "git-widget-placeholder": "master",
-    "node.js.detected.package.eslint": "true",
-    "node.js.detected.package.tslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)",
-    "nodejs_package_manager_path": "npm",
-    "ts.external.directory.path": "/snap/phpstorm/400/plugins/javascript-plugin/jsLanguageServicesImpl/external",
-    "vue.rearranger.settings.migration": "true"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;ASKED_SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
+    &quot;HTTP Request.All in test register.executor&quot;: &quot;Run&quot;,
+    &quot;HTTP Request.test register | #1.executor&quot;: &quot;Run&quot;,
+    &quot;HTTP Request.test register | GET request to example server.executor&quot;: &quot;Run&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;master&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,
+    &quot;ts.external.directory.path&quot;: &quot;/home/rd-dev/PhpstormProjects/IronInsight/front/node_modules/typescript/lib&quot;,
+    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
   }
-}]]></component>
+}</component>
+  <component name="RunManager" selected="HTTP Request.test register | #1">
+    <configuration name="All in test register" type="HttpClient.HttpRequestRunConfigurationType" factoryName="HTTP Request" temporary="true" path="$PROJECT_DIR$/back/test register.http">
+      <method v="2" />
+    </configuration>
+    <configuration name="test register | GET request to example server" type="HttpClient.HttpRequestRunConfigurationType" factoryName="HTTP Request" temporary="true" nameIsGenerated="true" path="$PROJECT_DIR$/back/test register.http" requestIdentifier="GET request to example server" runType="Run single request">
+      <method v="2" />
+    </configuration>
+    <configuration name="test register | #1" type="HttpClient.HttpRequestRunConfigurationType" factoryName="HTTP Request" temporary="true" nameIsGenerated="true" path="$PROJECT_DIR$/back/test register.http" requestIdentifier="#1" runType="Run single request">
+      <method v="2" />
+    </configuration>
+    <recent_temporary>
+      <list>
+        <item itemvalue="HTTP Request.test register | #1" />
+        <item itemvalue="HTTP Request.All in test register" />
+        <item itemvalue="HTTP Request.test register | GET request to example server" />
+      </list>
+    </recent_temporary>
+  </component>
   <component name="SharedIndexes">
     <attachedChunks>
       <set>
@@ -73,7 +120,19 @@
       <option name="presentableId" value="Default" />
       <updated>1718107471509</updated>
       <workItem from="1718107477115" duration="383000" />
+      <workItem from="1718107879920" duration="469000" />
+      <workItem from="1718108711024" duration="6817000" />
+      <workItem from="1718115760249" duration="2612000" />
     </task>
+    <task id="LOCAL-00001" summary="(+) revert back">
+      <option name="closed" value="true" />
+      <created>1718107998069</created>
+      <option name="number" value="00001" />
+      <option name="presentableId" value="LOCAL-00001" />
+      <option name="project" value="LOCAL" />
+      <updated>1718107998069</updated>
+    </task>
+    <option name="localTasksCounter" value="2" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -90,4 +149,8 @@
       </map>
     </option>
   </component>
+  <component name="VcsManagerConfiguration">
+    <MESSAGE value="(+) revert back" />
+    <option name="LAST_COMMIT_MESSAGE" value="(+) revert back" />
+  </component>
 </project>
\ No newline at end of file
Index: front/src/app/app.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/front/src/app/app.component.html b/front/src/app/app.component.html
--- a/front/src/app/app.component.html	(revision 8ca8b2131d04b55f8c26184a4d2699cd8597e1ea)
+++ b/front/src/app/app.component.html	(date 1718110001421)
@@ -1,0 +1,13 @@
+<header>
+  <nav>
+    <a href="/register">Register</a>
+  </nav>
+</header>
+
+<main>
+  <router-outlet></router-outlet>
+</main>
+
+<footer>
+
+</footer>
Index: back/services/db-service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import mysql, { Connection, MysqlError } from 'mysql';\n\nclass DbService {\n    private connection: Connection | null = null;\n\n    constructor() {}\n\n    async connect(): Promise<void> {\n        this.connection = mysql.createConnection({\n            host: 'localhost',\n            user: 'root',\n            password: '',\n            database: 'iron_insight'\n        });\n\n        this.connection.connect((err: MysqlError) => {\n            if (err) {\n                console.error('Erreur de connexion à la base de données : ', err);\n                throw err;\n            }\n            console.log('Connexion à la base de données MySQL réussie');\n        });\n    }\n\n    async query<T>(sql: string, values?: any[]): Promise<T> {\n        return new Promise<T>((resolve, reject) => {\n            if (!this.connection) {\n                reject(new Error('La connexion à la base de données n\\'est pas établie.'));\n                return;\n            }\n\n            this.connection.query(sql, values, (error: MysqlError | null, results?: T, fields?: any) => {\n                if (error) {\n                    reject(error);\n                } else {\n                    resolve(results as T);\n                }\n            });\n        });\n    }\n}\n\nexport const dbService = new DbService();\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/back/services/db-service.ts b/back/services/db-service.ts
--- a/back/services/db-service.ts	(revision 8ca8b2131d04b55f8c26184a4d2699cd8597e1ea)
+++ b/back/services/db-service.ts	(date 1718114012067)
@@ -8,8 +8,8 @@
     async connect(): Promise<void> {
         this.connection = mysql.createConnection({
             host: 'localhost',
-            user: 'root',
-            password: '',
+            user: 'admin',
+            password: 'admin',
             database: 'iron_insight'
         });
 
Index: front/src/app/app.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [RouterOutlet],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss'\n})\nexport class AppComponent {\n  title = 'IronInsight';\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/front/src/app/app.component.ts b/front/src/app/app.component.ts
--- a/front/src/app/app.component.ts	(revision 8ca8b2131d04b55f8c26184a4d2699cd8597e1ea)
+++ b/front/src/app/app.component.ts	(date 1718114653212)
@@ -4,7 +4,9 @@
 @Component({
   selector: 'app-root',
   standalone: true,
-  imports: [RouterOutlet],
+  imports: [
+    RouterOutlet
+  ],
   templateUrl: './app.component.html',
   styleUrl: './app.component.scss'
 })
Index: front/src/app/register/register.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-registe',\n  standalone: true,\n  imports: [],\n  templateUrl: './registe.component.html',\n  styleUrl: './registe.component.scss'\n})\nexport class RegisteComponent {\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/front/src/app/register/register.component.ts b/front/src/app/register/register.component.ts
--- a/front/src/app/register/register.component.ts	(revision 8ca8b2131d04b55f8c26184a4d2699cd8597e1ea)
+++ b/front/src/app/register/register.component.ts	(date 1718118310203)
@@ -1,12 +1,65 @@
-import { Component } from '@angular/core';
+import {Component, Inject} from '@angular/core';
+import {FormControl, FormGroup, ReactiveFormsModule, Validators} from "@angular/forms";
+import {User} from "../../interfaces/user.interface";
+import {UserService} from "../../services/user.service";
 
 @Component({
-  selector: 'app-registe',
+  selector: 'app-register',
   standalone: true,
-  imports: [],
-  templateUrl: './registe.component.html',
-  styleUrl: './registe.component.scss'
+  imports: [
+    ReactiveFormsModule,
+  ],
+  providers: [
+    UserService
+  ],
+  templateUrl: './register.component.html',
+  styleUrl: './register.component.scss'
 })
-export class RegisteComponent {
+
+export class RegisterComponent {
+
+  constructor(
+    @Inject(UserService) private userService: UserService
+  ) {
+  }
+
+  private _registerForm: any;
 
+  ngOnInit() {
+    this._registerForm = new FormGroup({
+      username: new FormControl('jean', [
+        Validators.required,
+        Validators.minLength(4),
+      ]),
+      email: new FormControl('jean@michel',[
+        Validators.required,
+        Validators.email
+      ]),
+      password: new FormControl('jean', [
+        Validators.required
+      ])
+    });
+  }
+
+
+  public onRegisterSubmit() {
+    if(this._registerForm.valid) {
+      //take all form data
+      const data = this._registerForm.value;
+      //user request
+      const userReq = {
+        username: data.username,
+        password: data.password,
+        email: data.email,
+        created_at: new Date(),
+        updated_at: new Date()
+      } as User
+
+      this.userService.registerUser(userReq).subscribe((data: any) => {
+        console.log(data)
+      });
+    }
+  }
+
+  get registerForm(): any { return this._registerForm; }
 }
Index: front/src/interfaces/user.interface.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/front/src/interfaces/user.interface.ts b/front/src/interfaces/user.interface.ts
new file mode 100644
--- /dev/null	(date 1718112569973)
+++ b/front/src/interfaces/user.interface.ts	(date 1718112569973)
@@ -0,0 +1,9 @@
+export interface User
+{
+  id: number,
+  username: string,
+  password: string,
+  email: string,
+  created_at: Date,
+  updated_at: Date,
+}
Index: front/src/services/user.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/front/src/services/user.service.ts b/front/src/services/user.service.ts
new file mode 100644
--- /dev/null	(date 1718118245348)
+++ b/front/src/services/user.service.ts	(date 1718118245348)
@@ -0,0 +1,27 @@
+import { HttpClient } from '@angular/common/http';
+import {inject, Injectable} from "@angular/core";
+import {User} from "../interfaces/user.interface";
+import {map, Observable, of, Subscription} from "rxjs";
+
+
+@Injectable({
+  providedIn: 'root',
+})
+
+export class UserService {
+
+  private http = inject(HttpClient);
+  private readonly api: string = "http://localhost:3333"
+
+
+  public registerUser(user: User): Observable<boolean>
+  {
+    return this.http.post<boolean>(
+      `${this.api}/register`,
+      JSON.stringify(user),
+      {
+        'headers': { 'content-type': 'application/json' }
+      }
+    )
+  }
+}
Index: front/src/app/register/register.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><p>registe works!</p>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/front/src/app/register/register.component.html b/front/src/app/register/register.component.html
--- a/front/src/app/register/register.component.html	(revision 8ca8b2131d04b55f8c26184a4d2699cd8597e1ea)
+++ b/front/src/app/register/register.component.html	(date 1718111996842)
@@ -1,1 +1,15 @@
-<p>registe works!</p>
+<div class="register-main">
+  <form [formGroup]="registerForm" action="#" (ngSubmit)="onRegisterSubmit()">
+    <label for="username">Username: </label>
+    <input id="username" type="text" formControlName="username">
+
+    <label for="email">Email: </label>
+    <input id="email" type="email" formControlName="email">
+
+    <label for="password">Password: </label>
+    <input id="password" type="password" formControlName="password">
+
+    <p>Complete the form to enable button.</p>
+    <button type="submit" [disabled]="!registerForm.valid">Submit</button>
+  </form>
+</div>
